%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <iostream>
  #include "ast.hpp"
  #include "primitive.hpp"
  #include "symtab.hpp"
  #define YYDEBUG 1

  int yylex(void);
  void yyerror(const char *);

  extern Program_ptr ast;
  int yylex(void);
  void yyerror(const char *);
%}

%error-verbose

%token BOOL       "bool"
%token ELSE       "else"
%token IF         "if"
%token INT        "int"
%token WHILE      "while"
%token VAR        "var"
%token FUNCTION   "function"
%token INTARRAY   "intarray"
%token RETURN     "return"

%token EQEQ       "=="
%token GTEQ       ">="
%token LEEQ       "<="
%token NOTEQ      "!="
%token AND        "&&"
%token OR         "||"

%token TRUE       "true"
%token FALSE      "false"
%token NUMBER     "number"
%token IDENTIFIER "identifier"

%token END 0      "end of file"

/* WRITE ME: put all your type definitions here*/
/* WRITE ME: put all your precedence/associativity rules here*/

%left ','
%nonassoc '='
%left "||"
%left "&&"
%left "==" "!="
%left '<' '>' "<=" ">="
%left '+' '-'
%left '*' '/'
%right '!'

/* '-', '!', '|' */
%%

Program : FunctionDeclarations { ast = new Program($1.u_func_list); }
        ;

FunctionDeclarations : FunctionDeclarations FunctionDeclaration
                       { $1.u_func_list->push_back($2.u_func); $$ = $1; }
                     | { $$.u_func_list = new list<Func_ptr>; }
                     ;

FunctionDeclaration : "function" FunctionType Identifier
                      '(' ParameterListOrEmpty ')'
                      '{' FunctionBody '}'
                      { $$.u_func = new Func($2.u_type, $3.u_symname,
                                             $5.u_param_list,
                                             $8.u_function_block); }
                    ;

FunctionType : "int"  { $$.u_type = new TInt;  }
             | "bool" { $$.u_type = new TBool; }
             ;

ParameterListOrEmpty : ParameterList { $$ = $1; }
                     | { $$.u_param_list = new list<Param_ptr>; }
                     ;

ParameterList : ParameterList ',' Parameter
                { $1.u_param_list->push_back($3.u_param); $$ = $1; }
              | Parameter { $$.u_param_list = new list<Param_ptr>;
                            $$.u_param_list->push_back($1.u_param);  }
              ;

Parameter : FunctionType Identifier
            { $$.u_param = new Param($1.u_type, $2.u_symname); }
          ;

FunctionBody : VariableDeclarations FunctionDeclarations
               Statements ReturnStatement
               { $$.u_function_block = new Function_block(
                   $1.u_decl_list, $2.u_func_list, $3.u_stat_list, 
                   $4.u_return); }
             ;

VariableDeclarations : VariableDeclarations VariableDeclaration
                       { $1.u_decl_list->push_back($2.u_decl); $$ = $1; }
                     | { $$.u_decl_list = new list<Decl_ptr>; }
                     ;

VariableDeclaration : "var" "int" IdentifierList ';'
                      { $$.u_decl = new Decl(new TInt, $3.u_symname_list); }
                    | "var" "bool" IdentifierList ';'
                      { $$.u_decl = new Decl(new TBool, $3.u_symname_list); }
                    | "var" "intarray" '[' Number ']' IdentifierList ';'
                      { $$.u_decl = new Decl(new TIntArray($4.u_primitive),
                                             $6.u_symname_list); }

IdentifierList : IdentifierList ',' Identifier
                { $1.u_symname_list->push_back($3.u_symname); $$ = $1; }
               | Identifier { $$.u_symname_list = new list<SymName_ptr>;
                              $$.u_symname_list->push_back($1.u_symname); }
               ;

Statements : Statements Statement
             { $1.u_stat_list->push_back($2.u_stat); $$ = $1; }
           | { $$.u_stat_list = new list<Stat_ptr>; }
           ;

Statement : Assignment        { $$ = $1; }
          | ArrayAssignment   { $$ = $1; }
          | FunctionCall      { $$ = $1; }
          | ArrayFunctionCall { $$ = $1; }
          | IfStatement       { $$ = $1; }
          | IfElseStatement   { $$ = $1; }
          | WhileStatement    { $$ = $1; }
          ;

Assignment : Identifier '=' Expression ';'
             { $$.u_stat = new Assignment($1.u_symname, $3.u_expr); }
           ;

ArrayAssignment : Identifier '[' Expression ']' '=' Expression ';'
                 { $$.u_stat = new ArrayAssignment(
                     $1.u_symname, $3.u_expr, $6.u_expr); }
                ;

FunctionCall : Identifier '=' Identifier '(' ExpressionListOrEmpty ')' ';'
               { $$.u_stat = new Call(
                   $1.u_symname, $3.u_symname, $5.u_expr_list); }
             ;

ArrayFunctionCall : Identifier '[' Expression ']' '=' 
                    Identifier '(' ExpressionListOrEmpty ')' ';'
                    { $$.u_stat = new ArrayCall(
                        $1.u_symname, $3.u_expr, $6.u_symname,
                        $8.u_expr_list); }
                  ;

ExpressionListOrEmpty : ExpressionList { $$ = $1; }
                      | { $$.u_expr_list = new list<Expr_ptr>; }
                      ;

ExpressionList : ExpressionList ',' Expression
                 { $1.u_expr_list->push_back($3.u_expr); $$ = $1; }
               | Expression { $$.u_expr_list = new list<Expr_ptr>;
                              $$.u_expr_list->push_back($1.u_expr);  }
               ;

IfStatement : "if" '(' Expression ')' '{' Statements '}'
              { $$.u_stat = new IfNoElse($3.u_expr,
                  new Nested_block($6.u_stat_list)); }
            ;

IfElseStatement : "if" '(' Expression ')' '{' Statements '}'
                  "else" '{' Statements '}'
                  { $$.u_stat = new IfWithElse($3.u_expr,
                      new Nested_block($6.u_stat_list),
                      new Nested_block($10.u_stat_list)); }
                ;

WhileStatement : "while" '(' Expression ')' '{' Statements '}'
                 { $$.u_stat = new WhileLoop($3.u_expr,
                     new Nested_block($6.u_stat_list)); }
               ;

ReturnStatement : "return" Expression ';'
                  { $$.u_return = new Return($2.u_expr); }

Expression : Expression "==" Expression
             { $$.u_expr = new Compare($1.u_expr, $3.u_expr); }
           | Expression '>' Expression
             { $$.u_expr = new Gt($1.u_expr, $3.u_expr); }
           | Expression ">=" Expression
             { $$.u_expr = new Gteq($1.u_expr, $3.u_expr); }
           | Expression '<' Expression
             { $$.u_expr = new Lt($1.u_expr, $3.u_expr); }
           | Expression "<=" Expression
             { $$.u_expr = new Lteq($1.u_expr, $3.u_expr); }
           | Expression "!=" Expression
             { $$.u_expr = new Noteq($1.u_expr, $3.u_expr); }
           | Expression "&&" Expression
             { $$.u_expr = new And($1.u_expr, $3.u_expr); }
           | Expression "||" Expression
             { $$.u_expr = new Or($1.u_expr, $3.u_expr); }
           | Expression '+' Expression
             { $$.u_expr = new Plus($1.u_expr, $3.u_expr); }
           | Expression '-' Expression
             { $$.u_expr = new Minus($1.u_expr, $3.u_expr); }
           | Expression '*' Expression
             { $$.u_expr = new Times($1.u_expr, $3.u_expr); }
           | Expression '/' Expression
             { $$.u_expr = new Div($1.u_expr, $3.u_expr); }
           | '-' Expression
             { $$.u_expr = new Uminus($2.u_expr); }
           | '!' Expression
             { $$.u_expr = new Not($2.u_expr); }
           | '|' Expression '|'
             { $$.u_expr = new Magnitude($2.u_expr); }
           | RightValue         { $$ = $1; }
           | '(' Expression ')' { $$ = $2; }
           ;


RightValue : Identifier { $$.u_expr = new Ident($1.u_symname); }
           | Identifier '[' Expression ']'
             { $$.u_expr = new ArrayAccess($1.u_symname, $3.u_expr); }
           | Number { $$.u_expr = new IntLit($1.u_primitive); }
           | TRUE   { $$.u_expr = new BoolLit(new Primitive(1)); }
           | FALSE  { $$.u_expr = new BoolLit(new Primitive(0)); }
           ;

Identifier : IDENTIFIER { $$.u_symname = new SymName($1.u_base_charptr); }
           ;

Number : NUMBER { $$.u_primitive = new Primitive($1.u_base_int); }
       ;

%%

#include <string.h>
void print_token(int token) {
  if(token < 255) {
    printf("%c ", token);
  } else {
    const char* name = yytname[yytranslate[token]];
    if(name[0] == '\'' || name[0] == '"') {
      int length = strlen(name);
      printf("%.*s ", length - 2, name+1);
    } else {
      printf("%s ", name);
    }
  }
}

extern int yylineno;

void yyerror(const char *s) {
  fprintf(stderr, "%s at line %d\n", s, yylineno);
	exit(1);
	return;
}
