%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <iostream>
  #define YYDEBUG 1

int yylex(void);
  void yyerror(const char *);
%}

%error-verbose

%token BOOL       "bool"
%token ELSE       "else"
%token IF         "if"
%token INT        "int"
%token WHILE      "while"
%token VAR        "var"
%token FUNCTION   "function"
%token INTARRAY   "intarray"
%token RETURN     "return"

%token EQEQ       "=="
%token GTEQ       ">="
%token LEEQ       "<="
%token NOTEQ      "!="
%token AND        "&&"
%token OR         "||"

%token TRUE       "true"
%token FALSE      "false"
%token NUMBER     "number"
%token IDENTIFIER "identifier"

%token END 0      "end of file"

/* WRITE ME: put all your type definitions here*/
/* WRITE ME: put all your precedence/associativity rules here*/

%%

/* WRITE ME: This is the language from Project 1(Calculator). You need
             to put the productions for the grammar for the
             language for this project here*/

List    : List RelExpr ';' {/*Your c code goes here!!!*/}
        | RelExpr ';'      {/*Your C code goes here!!!*/}
        ;

RelExpr : Expr '<' Expr
        | Expr '>' Expr
        | Expr '=' Expr
        | Expr
        ;

Expr    : Expr '*' Expr
        | Expr '+' Expr 
        | Expr '-' Expr
        | Expr '/' Expr
        | 'n'
        | '(' Expr ')'
        ;
%%

/*You shouldn't have to do anything past this*/

#include <string.h>
void print_token(int token) {
  if(token < 255) {
    printf("%c ", token);
  } else {
    const char* name = yytname[yytranslate[token]];
    if(name[0] == '\'' || name[0] == '"') {
      int length = strlen(name);
      printf("%.*s ", length - 2, name+1);
    } else {
      printf("%s ", name);
    }
  }
}

extern int yylineno;

void yyerror(const char *s) {
  fprintf(stderr, "%s at line %d\n", s, yylineno);
  exit(0);
}
