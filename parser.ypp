%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <iostream>
  #include "ast.hpp"
  #include "primitive.hpp"
  #include "symtab.hpp"
  #define YYDEBUG 1

  int yylex(void);
  void yyerror(const char *);

  extern Program_ptr ast;
  int yylex(void);
  void yyerror(const char *);
%}

%error-verbose

%token BOOL       "bool"
%token ELSE       "else"
%token IF         "if"
%token INT        "int"
%token WHILE      "while"
%token VAR        "var"
%token FUNCTION   "function"
%token INTARRAY   "intarray"
%token RETURN     "return"

%token EQEQ       "=="
%token GTEQ       ">="
%token LEEQ       "<="
%token NOTEQ      "!="
%token AND        "&&"
%token OR         "||"

%token TRUE       "true"
%token FALSE      "false"
%token NUMBER     "number"
%token IDENTIFIER "identifier"

%token END 0      "end of file"

/* WRITE ME: put all your type definitions here*/
/* WRITE ME: put all your precedence/associativity rules here*/

%left ','
%nonassoc '='
%left "||"
%left "&&"
%left "==" "!="
%left '<' '>' "<=" ">="
%left '+' '-'
%left '*' '/'
%right '!'

/* '-', '!', '|' */
%%

Program : FunctionDeclarations
        ;

FunctionDeclarations : FunctionDeclarations FunctionDeclaration
                     | /* empty */
                     ;

FunctionDeclaration : "function" FunctionType IDENTIFIER
                      '(' ParameterListOrEmpty ')'
                      '{' FunctionBody '}'
                    ;

FunctionType : "int"
             | "bool"
             ;

ParameterListOrEmpty : ParameterList
                     | /* empty */
                     ;

ParameterList : ParameterList ',' Parameter
              | Parameter
              ;

Parameter : FunctionType IDENTIFIER
          ;

FunctionBody : VariableDeclarations FunctionDeclarations
               Statements ReturnStatement
             ;

VariableDeclarations : VariableDeclarations VariableDeclaration
                     | /* empty */
                     ;

VariableDeclaration : "var" "int" IdentifierList ';'
                    | "var" "bool" IdentifierList ';'
                    | "var" "intarray" '[' NUMBER ']' IdentifierList ';'

IdentifierList : IdentifierList ',' IDENTIFIER
               | IDENTIFIER
               ;

Statements : Statements Statement
           | /* empty */
           ;

Statement : Assignment
          | FunctionCall
          | IfStatement
          | IfElseStatement
          | WhileStatement
          ;

Assignment : LeftValue '=' Expression ';'
           ;

FunctionCall : LeftValue '=' IDENTIFIER '(' ExpressionListOrEmpty ')' ';'
             ;

ExpressionListOrEmpty : ExpressionList
                      | /* empty */
                      ;

ExpressionList : ExpressionList ',' Expression
               | Expression
               ;

IfStatement : "if" '(' Expression ')' '{' Statements '}'
            ;

IfElseStatement : "if" '(' Expression ')' '{' Statements '}'
                  "else" '{' Statements '}'
                ;

WhileStatement : "while" '(' Expression ')' '{' Statements '}'
            ;

ReturnStatement : "return" Expression ';'

Expression : Expression "==" Expression
           | Expression '>' Expression
           | Expression ">=" Expression
           | Expression '<' Expression
           | Expression "<=" Expression
           | Expression "!=" Expression
           | Expression "&&" Expression
           | Expression "||" Expression
           | Expression '+' Expression
           | Expression '-' Expression
           | Expression '*' Expression
           | Expression '/' Expression
           | '-' Expression
           | '!' Expression
           | '|' Expression '|'
           | RightValue
           | '(' Expression ')'
           ;

LeftValue : IDENTIFIER
          | IDENTIFIER '[' Expression ']'
          ;

RightValue : LeftValue
           | NUMBER
           | TRUE
           | FALSE
           ;

%%

#include <string.h>
void print_token(int token) {
  if(token < 255) {
    printf("%c ", token);
  } else {
    const char* name = yytname[yytranslate[token]];
    if(name[0] == '\'' || name[0] == '"') {
      int length = strlen(name);
      printf("%.*s ", length - 2, name+1);
    } else {
      printf("%s ", name);
    }
  }
}

extern int yylineno;

void yyerror(const char *s) {
  fprintf(stderr, "%s at line %d\n", s, yylineno);
	exit(1);
	return;
}
